var geometry = (study area)


Map.centerObject(geometry,12);


//-------------------------------------------------------------------

//Set the pre-fire dates
var prefire_start =  '2023-01-01';   
var prefire_end   =  '2023-01-31';

//Set the post-fire dates

var postfire_start =  '2023-04-01';   
var postfire_end   =  '2023-05-28';



var platform =  'L9';



// Print Satellite platform and dates 
if (platform == 'S2' | platform == 's2') {
  var ImCol = 'COPERNICUS/S2';
  var pl = 'Sentinel-2';
} else if (platform == 'L8' | platform == 'l8') {
  var ImCol = 'LANDSAT/LC08/C01/T1_SR';
  var pl = 'Landsat 8';
} else if (platform == 'L9' | platform == 'l9') {
  var ImCol = 'LANDSAT/LC09/C02/T1_L2';
  var pl = 'Landsat 9';////
}

//print(ee.String('Data selected for analysis: ').cat(pl));
print(ee.String('Fire incident occurred between ').cat(prefire_end).cat(' and ').cat(postfire_start));

// Location
var area = ee.FeatureCollection(geometry);

// Set area of interest as map center.
Map.centerObject(area);

//----------------------- Select images by time and location -----------------------

var images = ee.ImageCollection(ImCol);

var prefireImCol = ee.ImageCollection(images
    // Filter by dates.
    .filterDate(prefire_start, prefire_end)
    // Filter by location.
    .filterBounds(area))
    .filter(ee.Filter.lt('CLOUD_COVER', 15));
    
// Select all images that overlap with the area of interest from a given time frame 
var postfireImCol = ee.ImageCollection(images
    .filterDate(postfire_start, postfire_end)
    .filterBounds(area))
    .filter(ee.Filter.lt('CLOUD_COVER', 25));;

print("Pre-fire Image Collection: ", prefireImCol); 
print("Post-fire Image Collection: ", postfireImCol);

//------------------------------- Apply cloud mask -------------------------------

// Function to mask clouds from the pixel quality band of Sentinel-2 SR data.
function maskS2sr(image) {
  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = ee.Number(2).pow(10).int();
  var cirrusBitMask = ee.Number(2).pow(11).int();
  // Get the pixel QA band.
  var qa = image.select('QA60');
  // All flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));
  // Return the masked image, scaled to TOA reflectance, without the QA bands.
  return image.updateMask(mask)
      .copyProperties(image, ["system:time_start"]);
}

// Function to mask clouds from the pixel quality band of Landsat 8 SR data.
function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // All flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
             .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  // Return the masked image, scaled to TOA reflectance, without the QA bands.
  return image.updateMask(mask)
      .select("B[0-9]*")
      .copyProperties(image, ["system:time_start"]);
}

// Apply cloud mask
if (platform === 'S2' || platform === 's2') {
  var prefire_CM_ImCol = prefireImCol.map(maskS2sr);
  var postfire_CM_ImCol = postfireImCol.map(maskS2sr);
} else if (platform === 'L8' || platform === 'l8') {
  var prefire_CM_ImCol = prefireImCol.map(maskL8sr);
  var postfire_CM_ImCol = postfireImCol.map(maskL8sr);
} else if (platform === 'L9' || platform === 'l9') {
  var prefire_CM_ImCol = prefireImCol;
  var postfire_CM_ImCol = postfireImCol;
}

//------------------------------- Apply water mask -------------------------------

function maskL8Water(image) {
  // to calculate the NDWI
  var ndwi = image.normalizedDifference(['B3', 'B5']).rename('NDWI');
  var water = ndwi.gt(0);
  var watermask = water.not();
  // Return the masked image
  return image.updateMask(watermask);
}

function maskS2Water(image) {
  // to calculate the NDWI
  var ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI');
  var water = ndwi.gt(0);
  var watermask = water.not();
  // Return the masked image
  return image.updateMask(watermask);
}

//-----------------------------------------------------------------------

// Apply platform-specific water mask
// Apply platform-specific water mask
if (platform === 'S2' || platform === 's2') {
  var prefire_CWM_ImCol = prefire_CM_ImCol.map(maskS2Water); 
  var postfire_CWM_ImCol = postfire_CM_ImCol.map(maskS2Water);
} else if (platform === 'L8' || platform === 'l8') {
  var prefire_CWM_ImCol = prefire_CM_ImCol.map(maskL8Water);
  var postfire_CWM_ImCol = postfire_CM_ImCol.map(maskL8Water);
} else if (platform === 'L9' || platform === 'l9') {
  var prefire_CWM_ImCol = prefire_CM_ImCol;
  var postfire_CWM_ImCol = postfire_CM_ImCol;
}


//----------------------- Mosaic and clip images to area of interest area -----------------------------

var pre_mos = prefireImCol.mosaic().clip(area);
var post_mos = postfireImCol.mosaic().clip(area);

var pre_cm_mos = prefire_CWM_ImCol.mosaic().clip(area);
var post_cm_mos = postfire_CWM_ImCol.mosaic().clip(area);

print("Pre-fire True Color Image: ", pre_mos); 
print("Post-fire True Color Image: ", post_mos);

//------------------ Calculate NBR for pre- and post-fire images ---------------------------

// Apply platform-specific NBR = (NIR-SWIR2) / (NIR+SWIR2)
var preNBR, postNBR;

if (platform === 'S2' || platform === 's2') {
  preNBR = pre_cm_mos.normalizedDifference(['B8', 'B12']);
  postNBR = post_cm_mos.normalizedDifference(['B8', 'B12']);
} else if (platform === 'L8' || platform === 'l8') {
  preNBR = pre_cm_mos.normalizedDifference(['B5', 'B7']);
  postNBR = post_cm_mos.normalizedDifference(['B5', 'B7']);
} else if (platform === 'L9' || platform === 'l9') {
  preNBR = pre_cm_mos.normalizedDifference(['SR_B5', 'SR_B7']);
  postNBR = post_cm_mos.normalizedDifference(['SR_B5', 'SR_B7']);
}

//print("Pre-fire Normalized Burn Ratio: ", preNBR); 
//print("Post-fire Normalized Burn Ratio: ", postNBR);

//------------------ Calculate difference between pre- and post-fire images ----------------

var dNBR_unscaled = preNBR.subtract(postNBR);

// Scale product to USGS standards
var dNBR = dNBR_unscaled.multiply(1000);

// Add the difference image to the console on the right
print("Difference Normalized Burn Ratio: ", dNBR);

//==========================================================================================
//                                    ADD LAYERS TO MAP

// Add boundary.
Map.addLayer(area.draw({color: 'ffffff', strokeWidth: 5}), {},'Area');

//---------------------------------- True Color Images ------------------------------------

// Apply platform-specific visualization parameters for true color images
var vis;
if (platform === 'S2' || platform === 's2') {
  vis = {bands: ['B4', 'B3', 'B2'], max: 2000, gamma: 1.5};
} else if (platform === 'L8' || platform === 'l8') {
  vis = {bands: ['B4', 'B3', 'B2'], min: 0, max: 4000, gamma: 1.5};
} else if (platform === 'L9' || platform === 'l9') {
  vis = {bands: ['SR_B4', 'SR_B3', 'SR_B2'], min: 6959.760, max: 19860.24, gamma: 1.58};
}

// Add the true color images to the map.
Map.addLayer(pre_mos, vis,'Pre-fire image');
Map.addLayer(post_mos, vis,'Post-fire image');

// Add the true color images to the map.
Map.addLayer(pre_cm_mos, vis,'Pre-fire True Color Image - Clouds masked');
Map.addLayer(post_cm_mos, vis,'Post-fire True Color Image - Clouds masked');

//--------------------------- Burn Ratio Product - Greyscale -------------------------------

var grey = ['white', 'black'];

Map.addLayer(preNBR, {min: -1, max: 1, palette: grey}, 'Prefire Normalized Burn Ratio');
Map.addLayer(postNBR, {min: -1, max: 1, palette: grey}, 'Postfire Normalized Burn Ratio');

Map.addLayer(dNBR, {min: -1000, max: 1000, palette: grey}, 'dNBR greyscale');

//------------------------- Burn Ratio Product - Classification ----------------------------

// Define an SLD style of discrete intervals to apply to the image.
var sld_intervals =
  '<RasterSymbolizer>' +
    '<ColorMap type="intervals" extended="false" >' +
      '<ColorMapEntry color="#ffffff" quantity="-500" label="-500"/>' +
      '<ColorMapEntry color="#7a8737" quantity="-250" label="-250" />' +
      '<ColorMapEntry color="#acbe4d" quantity="-100" label="-100" />' +
      '<ColorMapEntry color="#0ae042" quantity="100" label="100" />' +
      '<ColorMapEntry color="#fff70b" quantity="270" label="270" />' +
      '<ColorMapEntry color="#ffaf38" quantity="440" label="440" />' +
      '<ColorMapEntry color="#ff641b" quantity="660" label="660" />' +
      '<ColorMapEntry color="#a41fd6" quantity="2000" label="2000" />' +
    '</ColorMap>' +
  '</RasterSymbolizer>';

// Add the image to the map using both the color ramp and interval schemes.
Map.addLayer(dNBR.sldStyle(sld_intervals), {}, 'dNBR classified');

// classify result into 8 burn severity classes using USGS standards
var thresholds = ee.Image([-1000, -251, -101, 99, 269, 439, 659, 2000]);
var classified = dNBR.lt(thresholds).reduce('sum').toInt();

//==========================================================================================
//                              ADD AREA STATISTICS

// count number of pixels in entire layer
var allpix =  classified.updateMask(classified);  
var pixstats = allpix.reduceRegion({
  reducer: ee.Reducer.count(),               // count pixels in a single class
  geometry: area,
  scale: 30
  });
var allpixels = ee.Number(pixstats.get('sum')); // extract pixel count as a number


var arealist = [];

// create a function to derive extent of one burn severity class
var areacount = function(cnr, name) {
 var singleMask =  classified.updateMask(classified.eq(cnr));  
 var stats = singleMask.reduceRegion({
  reducer: ee.Reducer.count(),               // count pixels in a single class
  geometry: area,
  scale: 30
  });
var pix =  ee.Number(stats.get('sum'));
var hect = pix.multiply(900).divide(10000);               
var perc = pix.divide(allpixels).multiply(10000).round().divide(100);   // get area percent by class
arealist.push({Class: name, Pixels: pix, Hectares: hect, Percentage: perc});
};

// severity classes in different order
var names2 = ['NA', 'High Severity', 'Moderate-high Severity',
'Moderate-low Severity', 'Low Severity','Unburned', 'Low Enhanced Regrowth', 'High Enhanced Regrowth'];

// execute function for each class
for (var i = 0; i < 8; i++) {
  areacount(i, names2[i]);
  }

print('Burned Area by Severity Class', arealist, '-> CLICK HERE');

//===================================================================================================
//                                    ADD TITLE

//Create title
var title = ui.Label({
  value: 'POST-FIRE BURN SEVERITY MAPPING',
  style:{
  fontWeight: 'bold',
  fontSize: '18px'
  }});
title.style().set('position', 'top-center');
Map.add(title);


//===================================================================================================
//                                    ADD LEGEND

// set position of panel
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }});
 
// Create legend title
var legendTitle = ui.Label({
  value: 'Severity Classes',
  style: {fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
    }});
 
// Add the title to the panel
legend.add(legendTitle);
 
// Creates and styles 1 row of the legend.
var makeRow = function(color, name) {
 
      // Create the label that is actually the colored box.
      var colorBox = ui.Label({
        style: {
          backgroundColor: '#' + color,
          // Use padding to give the box height and width.
          padding: '8px',
          margin: '0 0 4px 0'
        }});
 
      // Create the label filled with the description text.
      var description = ui.Label({
        value: name,
        style: {margin: '0 0 4px 6px'}
      });
 
      // return the panel
      return ui.Panel({
        widgets: [colorBox, description],
        layout: ui.Panel.Layout.Flow('horizontal')
      })};
 
//  Palette with the colors
var palette =['a41fd6', 'ff641b', 'ffaf38', 'fff70b','0ae042',  'acbe4d', '7a8737','ffffff'];

 
// name of the legend
var names = ['High Severity','Moderate-high Severity',  'Moderate-low Severity', 'Low Severity','Unburned','Low Enhanced Regrowth ',
'High Enhanced Regrowth',  'NA'];
 
// Add color and and names
for (var i = 0; i < 8; i++) {
  legend.add(makeRow(palette[i], names[i]));
  }  
 
// add legend to map 
Map.add(legend);

//==========================================================================================
//                                  FILE EXPORT


//Export the burned area Severity image
Export.image.toDrive({image: classified, 
                      scale: 20,
                      description: 'BurnedAreaSeverityImage',
                      folder: 'Forest Fire Severity',
                      fileNamePrefix: 'BurnSeverity',
                      region: area, 
                      maxPixels: 1e10});
                      
 
var Burnedfc = ee.FeatureCollection(arealist.map(function(arealist) {
  return ee.Feature(null,{Class:arealist.Class, Hectares:arealist.Hectares, Percentage:arealist.Percentage, Pixels:arealist.Pixels})})) //create a function to return the arealist properties and values into your new feature collection

//Export the burned area stats as a csv
Export.table.toDrive({
  collection: Burnedfc, 
  description: 'BurnedAreaStats', 
  fileFormat: 'CSV', 
  folder: 'Forest Fire Severity', 
  selectors: ['system:index','Class', 'Hectares', 'Pixels'], 
}); 

Map.addLayer(geometry,{},'odisha')


